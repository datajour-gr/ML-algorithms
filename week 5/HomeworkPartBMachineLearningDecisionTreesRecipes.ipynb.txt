{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.7"
    },
    "colab": {
      "name": "MachineLearningDecisionTreesNaive BayesClassifiersFeatureImportance.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lz5baOUAvUJl",
        "colab_type": "text"
      },
      "source": [
        "# Μηχανική Μάθηση με \n",
        " # 1. Decision Trees\n",
        " \n",
        "\n",
        "> Πάμε να δούμε με ποιον τρόπο η μηχανική μάθηση μπορεί να μας βοηθήσει στην πρόβλεψη κάποιων γεγονότων, καταστάσεων, κλπ. \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jr6ssc7GvUJp",
        "colab_type": "text"
      },
      "source": [
        "## Ας ξεκινήσουμε το πείραμα!\n",
        "\n",
        "Εμένα μου αρέσει πάρα πολύ να μαγειρεύω, \n",
        "\n",
        "αλλά δεν μ αρέσει να διαβάζω συνταγές μόνο και μόνο για να δω από ποια κουζίνα προέρχονται.\n",
        "\n",
        "Θα ήθελα η μηχανή  να μπορούσε  να μου διαβάζει συνταγές μαγειρικής που βρίσκει στο internet και να μου προτείνει μόνο αυτές που μιλούν για ιταλικό φαγητό! \n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zoGXppYuvUJu",
        "colab_type": "text"
      },
      "source": [
        "## Προετοιμασία των δεδομένων\n",
        "\n",
        "### Βήμα 1.1: Εισάγουμε τα δεδομένα\n",
        "\n",
        "αλλά πριν, ζητάμε να μας εμφανίζει έως και 1000 χαρακτήρες που υπάρχουν στις στήλες ενός dataframe"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DR__As1VvUJx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "pd.set_option('display.max_colwidth', 1000)\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline \n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IHpfcIDz1Kqc",
        "colab_type": "text"
      },
      "source": [
        "Να συνδεθούμε πρώτα με το Google Drive αφού πρώτα έχουμε ανεβάσει εκεί το recipes.csv αρχείο με τις συνταγές μας"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4Pe5tVbd1IfZ",
        "colab_type": "code",
        "outputId": "27815768-1107-4810-9874-35d293491de4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/gdrive')\n",
        "\n",
        "\n",
        "\n",
        "# PATH = \"/gdrive/My\\ Drive/Colab\\ Notebooks/\"\n",
        "!ls {PATH}"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /gdrive; to attempt to forcibly remount, call drive.mount(\"/gdrive\", force_remount=True).\n",
            "'/gdrive/My Drive/Colab Notebooks/recipes.csv'\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qRoqprNf2DZu",
        "colab_type": "code",
        "outputId": "261a00b9-2462-4c57-8ef9-f0253aa0bc4f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        }
      },
      "source": [
        "df = pd.read_csv(\"/gdrive/My Drive/Colab Notebooks/recipes.csv\")\n",
        "df.head()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cuisine</th>\n",
              "      <th>id</th>\n",
              "      <th>ingredient_list</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>greek</td>\n",
              "      <td>10259</td>\n",
              "      <td>romaine lettuce, black olives, grape tomatoes, garlic, pepper, purple onion, seasoning, garbanzo beans, feta cheese crumbles</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>southern_us</td>\n",
              "      <td>25693</td>\n",
              "      <td>plain flour, ground pepper, salt, tomatoes, ground black pepper, thyme, eggs, green tomatoes, yellow corn meal, milk, vegetable oil</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>filipino</td>\n",
              "      <td>20130</td>\n",
              "      <td>eggs, pepper, salt, mayonaise, cooking oil, green chilies, grilled chicken breasts, garlic powder, yellow onion, soy sauce, butter, chicken livers</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>indian</td>\n",
              "      <td>22213</td>\n",
              "      <td>water, vegetable oil, wheat, salt</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>indian</td>\n",
              "      <td>13162</td>\n",
              "      <td>black pepper, shallots, cornflour, cayenne pepper, onions, garlic paste, milk, butter, salt, lemon juice, water, chili powder, passata, oil, ground cumin, boneless chicken skinless thigh, garam masala, double cream, natural yogurt, bay leaf</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       cuisine  ...                                                                                                                                                                                                                                   ingredient_list\n",
              "0        greek  ...                                                                                                                      romaine lettuce, black olives, grape tomatoes, garlic, pepper, purple onion, seasoning, garbanzo beans, feta cheese crumbles\n",
              "1  southern_us  ...                                                                                                               plain flour, ground pepper, salt, tomatoes, ground black pepper, thyme, eggs, green tomatoes, yellow corn meal, milk, vegetable oil\n",
              "2     filipino  ...                                                                                                eggs, pepper, salt, mayonaise, cooking oil, green chilies, grilled chicken breasts, garlic powder, yellow onion, soy sauce, butter, chicken livers\n",
              "3       indian  ...                                                                                                                                                                                                                 water, vegetable oil, wheat, salt\n",
              "4       indian  ...  black pepper, shallots, cornflour, cayenne pepper, onions, garlic paste, milk, butter, salt, lemon juice, water, chili powder, passata, oil, ground cumin, boneless chicken skinless thigh, garam masala, double cream, natural yogurt, bay leaf\n",
              "\n",
              "[5 rows x 3 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3VSb4A3TvUKJ",
        "colab_type": "text"
      },
      "source": [
        "### Βήμα 1.2: Δημιουργούμε μια καινούργια στήλη\n",
        "\n",
        "Οι τιμές της στήλης  πρέπει να είναι ένας αριθμός για να μπορεί η μηχανή να το διαχειριστεί σωστά. Ας θεωρήσουμε ότι φτιάχνουμε μια στήλη \"italian\".\n",
        "\n",
        "Οπότε ας πούμε ότι το \"italian\" θα είναι = `1` και όλες οι άλλες κουζίνες θα είναι = `0`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I-QkgZJYvUKL",
        "colab_type": "code",
        "outputId": "c30678d5-b30e-4997-a56e-b9798d96d35c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "df['is_italian'] = (df['cuisine'] == 'italian').astype(int)\n",
        "df.head(20)"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cuisine</th>\n",
              "      <th>id</th>\n",
              "      <th>ingredient_list</th>\n",
              "      <th>is_italian</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>greek</td>\n",
              "      <td>10259</td>\n",
              "      <td>romaine lettuce, black olives, grape tomatoes, garlic, pepper, purple onion, seasoning, garbanzo beans, feta cheese crumbles</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>southern_us</td>\n",
              "      <td>25693</td>\n",
              "      <td>plain flour, ground pepper, salt, tomatoes, ground black pepper, thyme, eggs, green tomatoes, yellow corn meal, milk, vegetable oil</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>filipino</td>\n",
              "      <td>20130</td>\n",
              "      <td>eggs, pepper, salt, mayonaise, cooking oil, green chilies, grilled chicken breasts, garlic powder, yellow onion, soy sauce, butter, chicken livers</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>indian</td>\n",
              "      <td>22213</td>\n",
              "      <td>water, vegetable oil, wheat, salt</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>indian</td>\n",
              "      <td>13162</td>\n",
              "      <td>black pepper, shallots, cornflour, cayenne pepper, onions, garlic paste, milk, butter, salt, lemon juice, water, chili powder, passata, oil, ground cumin, boneless chicken skinless thigh, garam masala, double cream, natural yogurt, bay leaf</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>jamaican</td>\n",
              "      <td>6602</td>\n",
              "      <td>plain flour, sugar, butter, eggs, fresh ginger root, salt, ground cinnamon, milk, vanilla extract, ground ginger, powdered sugar, baking powder</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>spanish</td>\n",
              "      <td>42779</td>\n",
              "      <td>olive oil, salt, medium shrimp, pepper, garlic, chopped cilantro, jalapeno chilies, flat leaf parsley, skirt steak, white vinegar, sea salt, bay leaf, chorizo sausage</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>italian</td>\n",
              "      <td>3735</td>\n",
              "      <td>sugar, pistachio nuts, white almond bark, flour, vanilla extract, olive oil, almond extract, eggs, baking powder, dried cranberries</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>mexican</td>\n",
              "      <td>16903</td>\n",
              "      <td>olive oil, purple onion, fresh pineapple, pork, poblano peppers, corn tortillas, cheddar cheese, ground black pepper, salt, iceberg lettuce, lime, jalapeno chilies, chopped cilantro fresh</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>italian</td>\n",
              "      <td>12734</td>\n",
              "      <td>chopped tomatoes, fresh basil, garlic, extra-virgin olive oil, kosher salt, flat leaf parsley</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>italian</td>\n",
              "      <td>5875</td>\n",
              "      <td>pimentos, sweet pepper, dried oregano, olive oil, garlic, sharp cheddar cheese, pepper, swiss cheese, provolone cheese, canola oil, mushrooms, black olives, sausages</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>chinese</td>\n",
              "      <td>45887</td>\n",
              "      <td>low sodium soy sauce, fresh ginger, dry mustard, green beans, white pepper, sesame oil, scallions, canola oil, sugar, Shaoxing wine, garlic, ground turkey, water, crushed red pepper flakes, corn starch</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>italian</td>\n",
              "      <td>2698</td>\n",
              "      <td>Italian parsley leaves, walnuts, hot red pepper flakes, extra-virgin olive oil, fresh lemon juice, trout fillet, garlic cloves, chipotle chile, fine sea salt, flat leaf parsley</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>mexican</td>\n",
              "      <td>41995</td>\n",
              "      <td>ground cinnamon, fresh cilantro, chili powder, ground coriander, kosher salt, ground black pepper, garlic, plum tomatoes, avocado, lime juice, flank steak, salt, ground cumin, black pepper, olive oil, crushed red pepper flakes, onions</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>italian</td>\n",
              "      <td>31908</td>\n",
              "      <td>fresh parmesan cheese, butter, all-purpose flour, fat free less sodium chicken broth, chopped fresh chives, gruyere cheese, ground black pepper, bacon slices, gnocchi, fat free milk, cooking spray, salt</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>indian</td>\n",
              "      <td>24717</td>\n",
              "      <td>tumeric, vegetable stock, tomatoes, garam masala, naan, red lentils, red chili peppers, onions, spinach, sweet potatoes</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>british</td>\n",
              "      <td>34466</td>\n",
              "      <td>greek yogurt, lemon curd, confectioners sugar, raspberries</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>italian</td>\n",
              "      <td>1420</td>\n",
              "      <td>italian seasoning, broiler-fryer chicken, mayonaise, zesty italian dressing</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>thai</td>\n",
              "      <td>2941</td>\n",
              "      <td>sugar, hot chili, asian fish sauce, lime juice</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>vietnamese</td>\n",
              "      <td>8152</td>\n",
              "      <td>soy sauce, vegetable oil, red bell pepper, chicken broth, yellow squash, garlic chili sauce, sliced green onions, broccolini, salt, fresh lime juice, cooked rice, chicken breasts, corn starch</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        cuisine  ...  is_italian\n",
              "0         greek  ...           0\n",
              "1   southern_us  ...           0\n",
              "2      filipino  ...           0\n",
              "3        indian  ...           0\n",
              "4        indian  ...           0\n",
              "5      jamaican  ...           0\n",
              "6       spanish  ...           0\n",
              "7       italian  ...           1\n",
              "8       mexican  ...           0\n",
              "9       italian  ...           1\n",
              "10      italian  ...           1\n",
              "11      chinese  ...           0\n",
              "12      italian  ...           1\n",
              "13      mexican  ...           0\n",
              "14      italian  ...           1\n",
              "15       indian  ...           0\n",
              "16      british  ...           0\n",
              "17      italian  ...           1\n",
              "18         thai  ...           0\n",
              "19   vietnamese  ...           0\n",
              "\n",
              "[20 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7yg8Q6HrvUKX",
        "colab_type": "code",
        "outputId": "82891965-fac0-4d37-a1b3-7a6a5113f952",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        }
      },
      "source": [
        "df[df.is_italian == 1].head(4)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cuisine</th>\n",
              "      <th>id</th>\n",
              "      <th>ingredient_list</th>\n",
              "      <th>is_italian</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>italian</td>\n",
              "      <td>3735</td>\n",
              "      <td>sugar, pistachio nuts, white almond bark, flour, vanilla extract, olive oil, almond extract, eggs, baking powder, dried cranberries</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>italian</td>\n",
              "      <td>12734</td>\n",
              "      <td>chopped tomatoes, fresh basil, garlic, extra-virgin olive oil, kosher salt, flat leaf parsley</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>italian</td>\n",
              "      <td>5875</td>\n",
              "      <td>pimentos, sweet pepper, dried oregano, olive oil, garlic, sharp cheddar cheese, pepper, swiss cheese, provolone cheese, canola oil, mushrooms, black olives, sausages</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>italian</td>\n",
              "      <td>2698</td>\n",
              "      <td>Italian parsley leaves, walnuts, hot red pepper flakes, extra-virgin olive oil, fresh lemon juice, trout fillet, garlic cloves, chipotle chile, fine sea salt, flat leaf parsley</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    cuisine  ...  is_italian\n",
              "7   italian  ...           1\n",
              "9   italian  ...           1\n",
              "10  italian  ...           1\n",
              "12  italian  ...           1\n",
              "\n",
              "[4 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d-gpGiYAvUKh",
        "colab_type": "text"
      },
      "source": [
        "### Βήμα 1.3: Φτιάχνουμε το  dataframe με τα features μας\n",
        "\n",
        "Πρόκειται να προβλέψουμε την κουζίνα **μόνο από 3 υλικά **.\n",
        "\n",
        "Ποια είναι τα 3 υλικά που είναι εντελώς ιταλικά? "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jc60YtOXvUKj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#df.ingredient_list.str.contains(\"......\").astype(int)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jMOiTxUjvUKs",
        "colab_type": "code",
        "outputId": "3b191e8d-1a71-4bda-aa18-4d0aa908a3fe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        }
      },
      "source": [
        "features_df = pd.DataFrame({\n",
        "    'has_tomatoes': df.ingredient_list.str.contains('tomato').astype(int),\n",
        "    'has_olive_oil': df.ingredient_list.str.contains('olive oil').astype(int),\n",
        "    'has_soy_sauce': df.ingredient_list.str.contains('soy sauce').astype(int)\n",
        "})\n",
        "features_df.head(3)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>has_tomatoes</th>\n",
              "      <th>has_olive_oil</th>\n",
              "      <th>has_soy_sauce</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   has_tomatoes  has_olive_oil  has_soy_sauce\n",
              "0             1              0              0\n",
              "1             1              0              0\n",
              "2             0              0              1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rPJw9mGovUK3",
        "colab_type": "code",
        "outputId": "21e9c2c1-5bf1-49fd-fd28-bd83fb67b291",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        }
      },
      "source": [
        "features_df.head(3)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>has_tomatoes</th>\n",
              "      <th>has_olive_oil</th>\n",
              "      <th>has_soy_sauce</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   has_tomatoes  has_olive_oil  has_soy_sauce\n",
              "0             1              0              0\n",
              "1             1              0              0\n",
              "2             0              0              1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E7d3MTaxvULA",
        "colab_type": "code",
        "outputId": "ee8cf379-b553-4be5-db22-f5f9c9b37f8a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "features_df.shape"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(39774, 3)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8P_K_PZbvULH",
        "colab_type": "text"
      },
      "source": [
        "## Βήμα 2: Χρήση του classifier\n",
        "## Βήμα 2.1: Κάνουμε import το classifier"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tZsZfsbAvULI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import confusion_matrix, f1_score"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t8D6zfmAvULS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "estimator = DecisionTreeClassifier(max_leaf_nodes=4, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EmjMZygMvULo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lb3e2LemvULy",
        "colab_type": "text"
      },
      "source": [
        "### Βήμα 2.2: Χωρίζουμε τα data σε test και train data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "woP_zi3LvULy",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Το train_test_split θα χωρίσει αυτόματα τα δεδομένα μας σε 2 μέρη \n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Χωρίζουμε σε...\n",
        "# X = όλα τα features\n",
        "# y = όλα τα labels\n",
        "# X_train είναι τα features για να εκπαιδεύσουμε τον αλγόριθμο στο (80%)\n",
        "# y_train είναι τα labels στα οποία θα εκπαιδευτεί το(80%)\n",
        "# X_test είναι τα features στα οποία θα τεστάρουμε το υπόλοιπο (20%)\n",
        "# y_train είναι τα labels που θα γίνει το τεστ (20%)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    features_df.values, # αυτό είναι το αν έχει μέσα τομάτες, λάδι κ.λπ \n",
        "    df.is_italian, #αυτό είναι το LABEL που φτιάξαμε και είναι αριθμός! (δηλαδή 0/1, όχι Ναι/Όχι)\n",
        "    test_size=0.2) \n",
        "\n",
        "# Η πρώτη παράμετρος είναι τα FEATURES. \n",
        "# η δεύτερη είναι το LABEL ως αριθμός \n",
        "# 80% training, 20% testing"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "gXJ9L8sZvUL6",
        "colab_type": "code",
        "outputId": "0eca2235-c51c-4f53-fca5-c4f431712cf3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 128
        }
      },
      "source": [
        "estimator.fit(X_train, y_train)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
              "                       max_depth=None, max_features=None, max_leaf_nodes=4,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
              "                       random_state=0, splitter='best')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1Y1mZfvlvUMC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "val_pred = estimator.predict(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SJvOXjh-vUMJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#New_pred = estimator.predict(New_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wgotlRDfvUMQ",
        "colab_type": "text"
      },
      "source": [
        "Για να δουμε την ακρίβεια της πρόβλεψης..."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "rkIqfGH0vUMR",
        "colab_type": "code",
        "outputId": "e0c5f1c5-9215-4cfc-c151-14446a6ceb6f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "f1_score(y_test, val_pred, average='macro')"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.44533537860828337"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3Es-3M9y5uoe",
        "colab_type": "text"
      },
      "source": [
        "Με τόσο χαμηλό σκορ φαίνεται δεν τα πήγαμε καλά στην πρόβλεψη"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "59pI49If6HA2",
        "colab_type": "text"
      },
      "source": [
        "Για να δούμε ποια από τα 3 υλικά της συνταγής βοήθησαν περισσότερο στην πρόβλεψη του ιταλικού φαγητού? "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B-NqwckTvUMY",
        "colab_type": "code",
        "outputId": "02a3bc55-d965-461f-8c9a-e579d5346d72",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        }
      },
      "source": [
        "fi = pd.DataFrame(estimator.feature_importances_, features_df.columns)\n",
        "fi.columns = ['Importance']\n",
        "fi.sort_values(by = 'Importance', ascending=False)[0:20]"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Importance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>has_olive_oil</th>\n",
              "      <td>0.859619</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>has_soy_sauce</th>\n",
              "      <td>0.140381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>has_tomatoes</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               Importance\n",
              "has_olive_oil    0.859619\n",
              "has_soy_sauce    0.140381\n",
              "has_tomatoes     0.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VeyzZLcqvUMe",
        "colab_type": "code",
        "outputId": "5aa9bcbf-65e0-4569-91bd-4e9d07069678",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plot = fi.sort_values(by = 'Importance', ascending=True).tail(15).plot.barh(figsize = (12,6), legend = False, title = 'Feature Importance')\n",
        "fig = plot.get_figure()"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAv0AAAF1CAYAAAB7zVU8AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAa7ElEQVR4nO3de7TndV3v8dcbhptyKzEjRedEYyUX\nUcbIczQpPdEJ83IUxfCCx/Cg5anlsY4nkQWahbmy0jTDNEy0ECUPJyv0CCqZEjPBcFExEwi8BSR4\nwVDxff74fSd3056ZDbMvsz8+HmvN8re/v+/l/dt+1/Dc39/3t6e6OwAAwLh2WekBAACApSX6AQBg\ncKIfAAAGJ/oBAGBwoh8AAAYn+gEAYHCiHwAABif6AVaRqrquqr5WVV+Z8+f7FmGfj1msGRdwvNOq\n6uzlOt62VNWJVfXXKz0HwFIT/QCrz890995z/nx2JYepqjUrefy7a7XODXB3iH6AAVTVflX1pqr6\nXFV9pqp+rap2nZ47uKourKpbqurmqnpbVe0/PffWJPdP8n+ndw1+paqOrqobt9j/v74bMF2pf2dV\nnV1VX0py4raOv4DZu6qeX1V/X1VfrqqXTzP/TVV9qareUVW7T+seXVU3VtWvTq/luqo6YYvvwx9X\n1U1VdX1VnVJVu0zPnVhVH66q366qW5Kck+QNSR4+vfZbp/WOrarLpmPfUFWnzdn/2mneZ1XVP04z\nvGTO87tOs/3D9Fo2VtVB03M/VFXvq6p/rqprquopd/H/ZoC7TfQDjOGsJN9M8gNJHpLkJ5P83PRc\nJfmNJN+X5IeTHJTktCTp7mck+cd8+92D31zg8R6f5J1J9k/ytu0cfyGOSXJkkh9N8itJzkzy9GnW\nQ5M8bc6635vkgCT3TfKsJGdW1Q9Oz702yX5Jvj/Jo5I8M8mz52x7VJJPJ7nPtP+Tk3xkeu37T+t8\nddpu/yTHJnleVT1hi3kfkeQHkzw6yalV9cPT8hdOs/50kn2T/Lckt1fVPZO8L8nbk3xPkuOTvL6q\nHnQXvkcAd5voB1h93l1Vt05/3l1V98ksMn+pu7/a3f+U5LczC8t096e6+33dfUd335Tk1ZkF8Y74\nSHe/u7u/lVncbvX4C/Sb3f2l7r46yVVJ3tvdn+7u25L8ZWY/SMz10un1fDDJe5I8ZXpn4fgk/7u7\n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\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "epHVjvqDvUMo",
        "colab_type": "text"
      },
      "source": [
        "# Χαμηλό αρκετά"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "DbhwCjxSvUMp",
        "colab_type": "code",
        "outputId": "75cebbcf-fb73-4b38-fb64-d8efede83d39",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        }
      },
      "source": [
        "# visualizing our decision tree \n",
        "import graphviz\n",
        "from sklearn.tree import export_graphviz\n",
        "\n",
        "dot_data = export_graphviz(estimator)\n",
        "graphviz.Source(export_graphviz(estimator,\n",
        "                                out_file=None,\n",
        "                                feature_names=features_df.columns,\n",
        "                                class_names=[\"0\", \"1\"],\n",
        "                                node_ids = True,\n",
        "                                impurity=True))\n"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<graphviz.files.Source at 0x7f1dd2edee48>"
            ],
            "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"592pt\" height=\"359pt\"\n viewBox=\"0.00 0.00 592.00 359.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 355)\">\n<title>Tree</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-355 588,-355 588,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"374,-351 227,-351 227,-253 374,-253 374,-351\"/>\n<text text-anchor=\"middle\" x=\"300.5\" y=\"-335.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">node #0</text>\n<text text-anchor=\"middle\" x=\"300.5\" y=\"-320.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">has_olive_oil &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"300.5\" y=\"-305.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.316</text>\n<text text-anchor=\"middle\" x=\"300.5\" y=\"-290.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 31819</text>\n<text text-anchor=\"middle\" x=\"300.5\" y=\"-275.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [25549, 6270]</text>\n<text text-anchor=\"middle\" x=\"300.5\" y=\"-260.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"292,-217 145,-217 145,-119 292,-119 292,-217\"/>\n<text text-anchor=\"middle\" x=\"218.5\" y=\"-201.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">node #1</text>\n<text text-anchor=\"middle\" x=\"218.5\" y=\"-186.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">has_soy_sauce &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"218.5\" y=\"-171.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.205</text>\n<text text-anchor=\"middle\" x=\"218.5\" y=\"-156.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 23229</text>\n<text text-anchor=\"middle\" x=\"218.5\" y=\"-141.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [20537, 2692]</text>\n<text text-anchor=\"middle\" x=\"218.5\" y=\"-126.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M270.4318,-252.8642C265.0282,-244.034 259.3513,-234.7571 253.8154,-225.7106\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"256.7696,-223.8326 248.5645,-217.1298 250.7988,-227.4864 256.7696,-223.8326\"/>\n<text text-anchor=\"middle\" x=\"242.7132\" y=\"-237.7354\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">True</text>\n</g>\n<!-- 2 -->\n<g id=\"node5\" class=\"node\">\n<title>2</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"454.5,-217 310.5,-217 310.5,-119 454.5,-119 454.5,-217\"/>\n<text text-anchor=\"middle\" x=\"382.5\" y=\"-201.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">node #2</text>\n<text text-anchor=\"middle\" x=\"382.5\" y=\"-186.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">has_soy_sauce &lt;= 0.5</text>\n<text text-anchor=\"middle\" x=\"382.5\" y=\"-171.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.486</text>\n<text text-anchor=\"middle\" x=\"382.5\" y=\"-156.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 8590</text>\n<text text-anchor=\"middle\" x=\"382.5\" y=\"-141.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [5012, 3578]</text>\n<text text-anchor=\"middle\" x=\"382.5\" y=\"-126.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n</g>\n<!-- 0&#45;&gt;2 -->\n<g id=\"edge4\" class=\"edge\">\n<title>0&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M330.5682,-252.8642C335.9718,-244.034 341.6487,-234.7571 347.1846,-225.7106\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"350.2012,-227.4864 352.4355,-217.1298 344.2304,-223.8326 350.2012,-227.4864\"/>\n<text text-anchor=\"middle\" x=\"358.2868\" y=\"-237.7354\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">False</text>\n</g>\n<!-- 3 -->\n<g id=\"node3\" class=\"node\">\n<title>3</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"147,-83 0,-83 0,0 147,0 147,-83\"/>\n<text text-anchor=\"middle\" x=\"73.5\" y=\"-67.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">node #3</text>\n<text text-anchor=\"middle\" x=\"73.5\" y=\"-52.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.234</text>\n<text text-anchor=\"middle\" x=\"73.5\" y=\"-37.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 19869</text>\n<text text-anchor=\"middle\" x=\"73.5\" y=\"-22.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [17181, 2688]</text>\n<text text-anchor=\"middle\" x=\"73.5\" y=\"-7.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n</g>\n<!-- 1&#45;&gt;3 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M162.024,-118.7296C151.1461,-109.2395 139.7616,-99.3075 128.9177,-89.8472\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"130.9685,-86.9916 121.1322,-83.055 126.3667,-92.2664 130.9685,-86.9916\"/>\n</g>\n<!-- 4 -->\n<g id=\"node4\" class=\"node\">\n<title>4</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"282,-83 165,-83 165,0 282,0 282,-83\"/>\n<text text-anchor=\"middle\" x=\"223.5\" y=\"-67.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">node #4</text>\n<text text-anchor=\"middle\" x=\"223.5\" y=\"-52.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.002</text>\n<text text-anchor=\"middle\" x=\"223.5\" y=\"-37.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 3360</text>\n<text text-anchor=\"middle\" x=\"223.5\" y=\"-22.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [3356, 4]</text>\n<text text-anchor=\"middle\" x=\"223.5\" y=\"-7.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n</g>\n<!-- 1&#45;&gt;4 -->\n<g id=\"edge3\" class=\"edge\">\n<title>1&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M220.4474,-118.7296C220.7788,-110.3452 221.1239,-101.6158 221.4577,-93.1714\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"224.9597,-93.1854 221.8575,-83.055 217.9652,-92.9089 224.9597,-93.1854\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"448.5,-83 308.5,-83 308.5,0 448.5,0 448.5,-83\"/>\n<text text-anchor=\"middle\" x=\"378.5\" y=\"-67.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">node #5</text>\n<text text-anchor=\"middle\" x=\"378.5\" y=\"-52.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.49</text>\n<text text-anchor=\"middle\" x=\"378.5\" y=\"-37.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 8299</text>\n<text text-anchor=\"middle\" x=\"378.5\" y=\"-22.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [4735, 3564]</text>\n<text text-anchor=\"middle\" x=\"378.5\" y=\"-7.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n</g>\n<!-- 2&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>2&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M380.942,-118.7296C380.6769,-110.3452 380.4009,-101.6158 380.1339,-93.1714\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"383.6284,-92.9393 379.814,-83.055 376.6319,-93.1606 383.6284,-92.9393\"/>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"584,-83 467,-83 467,0 584,0 584,-83\"/>\n<text text-anchor=\"middle\" x=\"525.5\" y=\"-67.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">node #6</text>\n<text text-anchor=\"middle\" x=\"525.5\" y=\"-52.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.092</text>\n<text text-anchor=\"middle\" x=\"525.5\" y=\"-37.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 291</text>\n<text text-anchor=\"middle\" x=\"525.5\" y=\"-22.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [277, 14]</text>\n<text text-anchor=\"middle\" x=\"525.5\" y=\"-7.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n</g>\n<!-- 2&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>2&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M438.197,-118.7296C448.9249,-109.2395 460.1524,-99.3075 470.8467,-89.8472\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"473.3539,-92.3022 478.5248,-83.055 468.7158,-87.0592 473.3539,-92.3022\"/>\n</g>\n</g>\n</svg>\n"
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3pOnFlRMvUMy",
        "colab_type": "text"
      },
      "source": [
        "# Να προσθέσουμε ένα υλικό ώστε να πάμε σε καλύτερη ακρίβεια πρόβλεψης"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FE6otXNtvUMz",
        "colab_type": "code",
        "outputId": "3192f2e4-571f-4169-f685-a745263870c9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        }
      },
      "source": [
        "features_df = pd.DataFrame({\n",
        "    'has_tomatoes': df.ingredient_list.str.contains('tomato').astype(int),\n",
        "    'has_olive_oil': df.ingredient_list.str.contains('olive oil').astype(int),\n",
        "    'has_soy_sauce': df.ingredient_list.str.contains('soy sauce').astype(int),\n",
        "    'has_basil': df.ingredient_list.str.contains('basil').astype(int)\n",
        "\n",
        "})\n",
        "features_df.head(3)"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>has_tomatoes</th>\n",
              "      <th>has_olive_oil</th>\n",
              "      <th>has_soy_sauce</th>\n",
              "      <th>has_basil</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   has_tomatoes  has_olive_oil  has_soy_sauce  has_basil\n",
              "0             1              0              0          0\n",
              "1             1              0              0          0\n",
              "2             0              0              1          0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2mG-Od3svUM6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    features_df.values, # αυτό είναι το αν έχει μέσα τομάτες, λάδι, σόγια και ΒΑΣΙΛΙΚΟ κ.λπ \n",
        "    df.is_italian, #αυτό είναι το LABEL που φτιάξαμε και είναι αριθμός! (δηλαδή 0/1, όχι Ναι/Όχι)\n",
        "    test_size=0.2) \n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9kiQjMHgvUM_",
        "colab_type": "code",
        "outputId": "cd48af20-9400-4ad0-f221-c343999bf6c1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 128
        }
      },
      "source": [
        "estimator.fit(X_train, y_train)"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
              "                       max_depth=None, max_features=None, max_leaf_nodes=4,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
              "                       random_state=0, splitter='best')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "10u-f1aJvUNH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "val_pred = estimator.predict(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B2JcchJAvUNN",
        "colab_type": "code",
        "outputId": "145b6e9d-5a41-4bdf-d9fa-fe72fc389fee",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "f1_score(y_test, val_pred, average='macro')"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5916028530081234"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GEeX_yFZvUNT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p8ZAOWbS64y_",
        "colab_type": "text"
      },
      "source": [
        "Φαίνεται τα πάμε καλύτερα τώρα"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T8DKMRRlvUNZ",
        "colab_type": "code",
        "outputId": "b43f0b92-adee-4888-94c7-f3df1aaf11cf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        }
      },
      "source": [
        "fi = pd.DataFrame(estimator.feature_importances_, features_df.columns)\n",
        "fi.columns = ['Importance']\n",
        "fi.sort_values(by = 'Importance', ascending=False)[0:20]\n",
        "\n"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Importance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>has_olive_oil</th>\n",
              "      <td>0.602285</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>has_basil</th>\n",
              "      <td>0.397715</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>has_tomatoes</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>has_soy_sauce</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               Importance\n",
              "has_olive_oil    0.602285\n",
              "has_basil        0.397715\n",
              "has_tomatoes     0.000000\n",
              "has_soy_sauce    0.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RjrshMUpvUNe",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "outputId": "1a48f99e-7a0d-491c-cd77-469b73d3b24f"
      },
      "source": [
        "plot = fi.sort_values(by = 'Importance', ascending=True).tail(15).plot.barh(figsize = (14,8), legend = False, title = 'Feature Importance')\n",
        "fig = plot.get_figure()"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA2wAAAHiCAYAAACUSU/QAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nO3de7zldV3v8fcHBgUUsISMkJgjYSUX\nL4yh52hRmXiiEA/iJW+Y4UEz63isLJEjmuXlkZWmx8DLmGihYh7KU8jxSqbEjDBcVNQEw2uIXLwQ\nCn7OH+s3up32zCyYPbO/wzyfj8c8XOu3fpfP2j/3DK/5/faa6u4AAAAwnp2WewAAAAAWJ9gAAAAG\nJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAGEZVXVlVN1bV1xf8+pEl2OdDlmrGOY73\n/Ko6Y1sdb1Oq6oSq+sflngOA206wATCaX+7uOy/49YXlHKaqVizn8W+r7XVuAL6fYANgeFW1V1W9\nrqq+WFWfr6o/qKqdp9cOrKr3VtU1VfWVqnpzVd1leu1NSX40yd9OV+t+p6qOrKrPbbD/716Fm66Q\nvb2qzqiqG5KcsKnjzzF7V9XTq+pTVfW1qnrhNPM/VdUNVfXWqrrDtO6RVfW5qvr96b1cWVWP2+Dr\n8JdVdXVVfbaqTq6qnabXTqiqD1XVn1TVNUnOTPKaJA+c3vt103pHV9WF07GvqqrnL9j/ymneJ1XV\nv04zPHfB6ztPs/3L9F7WVtX+02s/UVXnVtVXq+ryqnrUrTzNACxCsAGwPVid5OYkP5bkvkkemuTX\nptcqyR8l+ZEkP5lk/yTPT5LufkKSf833rtq9dM7jPTzJ25PcJcmbN3P8eRyV5PAkD0jyO0lOS/L4\nadZDkjx2wbo/nGTvJPsleVKS06rqx6fXXplkryT3SPIzSZ6Y5MkLtj0iyWeS3G3a/0lJPjy997tM\n63xj2u4uSY5O8rSqOnaDeR+U5MeT/HySU6rqJ6flz5pm/cUkeyb51STfrKo7JTk3yVuS/FCSxyR5\ndVXd61Z8jQBYhGADYDTvrKrrpl/vrKq7ZRYIv9Xd3+juf0vyJ5lFQbr70919bnff1N1XJ3l5ZjGz\nJT7c3e/s7u9kFiYbPf6cXtrdN3T3ZUkuTfLu7v5Md1+f5O8zi8CFnje9nw8keVeSR01X9B6T5Pe6\n+2vdfWWSP07yhAXbfaG7X9ndN3f3jYsN0t3v7+5Luvs73X1xkr/Kf/x6ndrdN3b3uiTrktx7Wv5r\nSU7u7st7Zl13X5Pkl5Jc2d1vmI59YZKzkhx/K75GACzC/e0AjObY7v5/659U1U8l2SXJF6tq/eKd\nklw1vX63JH+W5MFJ9pheu3YLZ7hqweMDNnX8OX15weMbF3n+wwueX9vd31jw/LOZXT3ce5rjsxu8\ntt9G5l5UVR2R5MWZXdm7Q5I7JnnbBqt9acHjbya58/R4/yT/sshuD0hyxPrbLicrkrxpc/MAsGmu\nsAEwuquS3JRk7+6+y/Rrz+4+eHr9D5N0kkO7e8/MbgWsBdv3Bvv7RpLd1z+Zrlzts8E6C7fZ3PGX\n2g9Mtxiu96NJvpDkK0m+nVkcLXzt8xuZe7Hnyey2xbOT7N/de2X2c261yHqLuSrJgRtZ/oEFX5+7\nTLdhPm3O/QKwEYINgKF19xeTvDvJH1fVnlW10/ShHetv49sjydeTXF9V+yX57Q128eXMfuZrvU8m\n2XX68I1dkpyc2VWm23r8reHUqrpDVT04s9sN39bdtyR5a5IXVdUeVXVAZj9Ttql/QuDLSe6+/kNN\nJnsk+Wp3//t09fJXbsVcr03ywqo6qGYOq6q7Jvm7JPesqidU1S7Tr/sv+Nk3AG4jwQbA9uCJmd2+\n97HMbnd8e5J9p9dOTXK/JNdn9vNe79hg2z9KcvL0M3HPnn5u7OmZxcfnM7vi9rls2qaOv9S+NB3j\nC5l94MlJ3f2J6bXfyGzezyT5x8yulr1+E/t6b5LLknypqr4yLXt6khdU1deSnJJZBM7r5dP6705y\nQ5LXJdmtu7+W2QexPGaa+0tJXpJNhDAA86nuxe6WAAC2tao6MskZ3X335Z4FgDG4wgYAADAowQYA\nADAot0QCAAAMyhU2AACAQQk2AACAQa1Y7gFu7/bee+9euXLlco8BAAAMbO3atV/p7n02XC7YtrKV\nK1dmzZo1yz0GAAAwsKr67GLL3RIJAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEG\nAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAw\nKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwKMEGAAAwqBXL\nPcDt3SWfvz4rn/Ou5R4DAABIcuWLj17uEW4VV9gAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAG\nJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgA\nAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGtaTBVlUr\nq+rSpdznZo53ZFX93fT4mKp6zjY45klV9cTp8eqqeuTWPiYAALBjWrHcAyyV7j47ydnb4Div2drH\nAAAASLbOLZE7V9XpVXVZVb27qnarqhOr6oKqWldVZ1XV7klSVcdX1aXT8g9ubIdVtWtVvaGqLqmq\nC6vqZxdZ54Sq+vOq2quqPltVO03L71RVV1XVLlV1YFX9Q1WtrarzquonNnHMlVX13qq6uKreU1U/\nOi1/flU9e8u/TAAAAJu2NYLtoCSv6u6Dk1yX5Lgk7+ju+3f3vZN8PMlTpnVPSXLUtPyYTezz15N0\ndx+a5LFJ3lhVuy62Yndfn+SiJD8zLfqlJOd097eTnJbkN7r78CTPTvLqTRzzlUne2N2HJXlzklds\n5n1/V1U9tarWVNWaW755/bybAQAAfJ+tEWxXdPdF0+O1SVYmOWS6onVJksclOXh6/UNJVlfViUl2\n3sQ+H5TkjCTp7k8k+WySe25i/TOTPHp6/JgkZ1bVnZP85yRvq6qLkvxFkn03sY8HJnnL9PhN0wxz\n6e7TuntVd6/aefe95t0MAADg+2yNn2G7acHjW5LslmR1kmO7e11VnZDkyCTp7pOq6ogkRydZW1WH\nd/c1SzDD2Un+sKp+MMnhSd6b5E5Jruvu+yzB/gEAALa6bfWx/nsk+WJV7ZLZFbYkSVUd2N3nd/cp\nSa5Osv9Gtj9v/XZVdc8kP5rk8o0drLu/nuSCJH+W5O+6+5buviHJFVV1/LSfqqp7b2Lmf8rs6lym\nY5+3+bcJAACwdLZVsD0vyfmZ3QL5iQXLXzZ9kMilmQXSuo1s/+okO023VJ6Z5ITuvmkj6653ZpLH\nT/+73uOSPKWq1iW5LMnDN7H9byR5clVdnOQJSX5zM8cDAABYUtXdyz3D7dod9z2o933Sny73GAAA\nQJIrX3z0co+wqKpa292rNly+ra6wAQAAcCsN9Q9nV9VRSV6yweIruvsRW/GYz01y/AaL39bdL9pa\nxwQAAJjHUMHW3eckOWcbH/NFScQZAAAwHLdEAgAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqw\nAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAA\nDEqwAQAADEqwAQAADEqwAQAADGrFcg9we3fofntlzYuPXu4xAACA7ZArbAAAAIMSbAAAAIMSbAAA\nAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMS\nbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAA\nAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMS\nbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAA\nAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMSbAAAAIMS\nbAAAAIMSbAAAAIMSbAAAAIMSbAAAAINasdwD3N5d8vnrs/I571ruMQCATbjyxUcv9wgAi3KFDQAA\nYFCCDQAAYFCCDQAAYFCCDQAAYFCCDQAAYFCCDQAAYFCCDQAAYFCCDQAAYFCCDQAAYFCCDQAAYFCC\nDQAAYFCCDQAAYFCCDQAAYFCCDQAAYFCCDQAAYFCCDQAAYFCCDQAAYFCCDQAAYFCCDQAAYFCCDQAA\nYFCCDQAAYFCCDQAAYFCCDQAAYFDDBVtVrayqS7fCfk+oqj9fgv28oKoeMj1+f1Wt2vLpAAAA/qMV\nyz3A9qa7T1nuGQAAgB3DcFfYJjtX1elVdVlVvbuqdquqE6vqgqpaV1VnVdXuSVJVx1fVpdPyD25m\nv/tPV8U+VVX/a/3CqnpnVa2djvfUadnOVbV62vclVfU/puWrq+qRW+2dAwAATEa9wnZQksd294lV\n9dYkxyV5R3efniRV9QdJnpLklUlOSXJUd3++qu6ymf3+VJJDknwzyQVV9a7uXpPkV7v7q1W127T8\nrCQrk+zX3YdMx9zcvr9rir6nJsnOe+4z95sGAABYaNQrbFd090XT47WZxdMhVXVeVV2S5HFJDp5e\n/1CS1VV1YpKdN7Pfc7v7mu6+Mck7kjxoWv7MqlqX5CNJ9s8sGD+T5B5V9cqqeliSG+YdvrtP6+5V\n3b1q5933mnczAACA7zNqsN204PEtmV0JXJ3kGd19aJJTk+yaJN19UpKTMwuttVV1103stzd8XlVH\nJnlIkgd2972TXJhk1+6+Nsm9k7w/yUlJXrtlbwkAAODWGTXYFrNHki9W1S6ZXWFLklTVgd19/vRh\nIFdnFm4b8wtV9YPTrY/HZnZ1bq8k13b3N6vqJ5I8YNrv3kl26u6zMgvC+22VdwUAALARo/4M22Ke\nl+T8zKLs/MwCLkleVlUHJakk70mybhP7+OckZyW5e5IzunvNdIvlSVX18SSXZ3ZbZJLsl+QNVbU+\nan9vKd8MAADA5lT3hncJspTuuO9Bve+T/nS5xwAANuHKFx+93CMAO7iqWtvd/+HfeN6ebokEAADY\noWxPt0TOpaqOSvKSDRZf0d2PWI55AAAAbqvbXbB19zlJzlnuOQAAALaUWyIBAAAGJdgAAAAGJdgA\nAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAG\nJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGtWK5B7i9O3S/vbLmxUcv9xgAAMB2\nyBU2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2\nAACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACA\nQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2\nAACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACA\nQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2\nAACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACA\nQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2\nAACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACAQQk2AACA\nQQk2AACAQQk2AACAQW022KpqZVVdui2GAQAA4HtcYQMAABjUvMG2c1WdXlWXVdW7q2q3qjqxqi6o\nqnVVdVZV7Z4kVXV8VV06Lf/gxnZYVQdX1T9X1UVVdXFVHTQtf9a0/aVV9VvTshesfzw9f1FV/eZG\n9rtvVX1w2u+lVfXgafn/rqo103s4dcH6V1bV3tPjVVX1/unxnavqDVV1yTTfcdPyh1bVh6vqo1X1\ntqq685xfQwAAgFtl3mA7KMmruvvgJNclOS7JO7r7/t197yQfT/KUad1Tkhw1LT9mE/s8Kcmfdfd9\nkqxK8rmqOjzJk5MckeQBSU6sqvsmeX2SJyZJVe2U5DFJztjIfn8lyTnTfu+d5KJp+XO7e1WSw5L8\nTFUdtpn3/Lwk13f3od19WJL3TmF3cpKHdPf9kqxJ8qwNN6yqp05xuObqq6/ezGEAAAAWN2+wXdHd\n68NnbZKVSQ6pqvOq6pIkj0ty8PT6h5KsrqoTk+y8iX1+OMnvV9XvJjmgu29M8qAkf9Pd3+juryd5\nR5IHd/eVSa6Z4u2hSS7s7ms2st8Lkjy5qp6f5NDu/tq0/FFV9dEkF06z3msz7/khSV61/kl3X5tZ\nRN4ryYeq6qIkT0pywIYbdvdp3b2qu1fts88+mzkMAADA4lbMud5NCx7fkmS3JKuTHNvd66rqhCRH\nJkl3n1RVRyQ5Osnaqjp8sbjq7rdU1fnTev+3qv77ZmZ4bZITkvxwZlfcFtXdH6yqn572u7qqXp7k\nvCTPTnL/7r62qlYn2XXa5OZ8L1x33XB/G6gk53b3YzezHgAAwBbbkg8d2SPJF6tql8yusCVJqurA\n7j6/u09JcnWS/RfbuKrukeQz3f2KJP8ns1sVz0tybFXtXlV3SvKIaVmS/E2ShyW5f5JzNjZUVR2Q\n5MvdfXpmkXe/JHsm+UaS66vqbkn+64JNrkxy+PT4uAXLz03y6wv2+wNJPpLkv1TVj03L7lRV99zY\nLAAAAFti3itsi3lekvMzi7LzMwu4JHnZ9AEileQ9SdZtZPtHJXlCVX07yZeS/GF3f3W6+vXP0zqv\n7e4Lk6S7v1VV70tyXXffsom5jkzy29N+v57kid19RVVdmOQTSa7K7LbN9U5N8rqqemGS9y9Y/gdJ\nXjX9kwa3JDm1u98xXU38q6q647TeyUk+uYl5AAAAbpPq7uWeYS7Th418NMnx3f2p5Z5nXqtWreo1\na9Ys9xgAAMDAqmrt9CGJ32e7+HfYqupeST6d5D3bU6wBAABsiS25JXIuVXVUkpdssPiK7n7EvPvo\n7o8luccG+z00yZs2WPWm7j7iNg0KAAAwmK0ebN19TjbxISFbsN9LktxnqfcLAAAwiu3ilkgAAIAd\nkWADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGAD\nAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAY\nlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGAD\nAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAY\nlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGAD\nAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAY\nlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGAD\nAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAY\nlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGAD\nAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAYlGADAAAY\nlGADAAAY1G0KtqpaWVWXLvUwVXWfqvrFpd7vIsc5oap+ZGsfBwAAYEuMdoXtPkm2erAlOSGJYAMA\nAIa2JcG2c1WdXlWXVdW7q2q3qjqxqi6oqnVVdVZV7Z4kVXV8VV06Lf/gYjurqjskeUGSR1fVRVX1\n6Kr6wap6Z1VdXFUfqarDpnWfX1VvrKrzquqzVfXfquqlVXVJVf1DVe0yrXfKNM+lVXVazTwyyaok\nb56Os1tV/XxVXTht//qquuO0/eFV9YGqWltV51TVvtPyZ1bVx6a5/nqR9/LUqlpTVWuuvvrqLfgS\nAwAAO7ItCbaDkryquw9Ocl2S45K8o7vv3933TvLxJE+Z1j0lyVHT8mMW21l3f2ta78zuvk93n5nk\n1CQXdvdhSX4/yV8u2OTAJD837e+MJO/r7kOT3Jjk6GmdP5/mOSTJbkl+qbvfnmRNksd1932SdJLV\nSR49bb8iydOm6Htlkkd29+FJXp/kRdN+n5PkvtNcJy3yXk7r7lXdvWqfffaZ76sJAACwgS0Jtiu6\n+6Lp8dokK5McMl31uiTJ45IcPL3+oSSrq+rEJDvfimM8KMmbkqS735vkrlW15/Ta33f3t5NcMu3z\nH6bll0yzJMnPVtX50zw/t2CehX58ei+fnJ6/MclPT8sPSXJuVV2U5OQkd5/WuTizK3SPT3LzrXg/\nAAAAc1uxBdvetODxLZldwVqd5NjuXldVJyQ5Mkm6+6SqOiKzK19rq+rw7r5mC4793eN393eq6tvd\n3dPy7yRZUVW7Jnl1klXdfVVVPT/Jrrdi/5Xksu5+4CKvHZ1Z1P1ykudW1aHdLdwAAIAltdQfOrJH\nki9OtxM+bv3Cqjqwu8/v7lOSXJ1k/41s/7VpH+udt34/VXVkkq909w1zzrI+zr5SVXdO8siNHOfy\nJCur6sem509I8oFp+T5V9cDp+LtU1cFVtVOS/bv7fUl+N8leSe4850wAAABz25IrbIt5XpLzM4uy\n8/O9KHpZVR2U2VWr9yRZt5Ht35fkOdMtiH+U5PlJXl9VFyf5ZpInzTtId19XVacnuTTJl5JcsODl\n1UleU1U3JnlgkicneVtVrZjWe013f2v6gJJXVNVemX2t/jTJJ5OcMS2rJK/o7uvmnQsAAGBe9b07\nCdkaVq1a1WvWrFnuMQAAgIFV1druXrXh8tH+HTYAAAAmS31L5Fyq6qgkL9lg8RXd/YjlmAcAAGBE\nyxJs3X1OknOW49gAAADbC7dEAgAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAA\nDEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqw\nAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAA\nDEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqw\nAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAADEqwAQAA\nDKq6e7lnuF2rqq8luXy552Cb2TvJV5Z7CLYZ53vH4VzvWJzvHYdzvWMZ/Xwf0N37bLhwxXJMsoO5\nvLtXLfcQbBtVtcb53nE43zsO53rH4nzvOJzrHcv2er7dEgkAADAowQYAADAowbb1nbbcA7BNOd87\nFud7x+Fc71ic7x2Hc71j2S7Ptw8dAQAAGJQrbAAAAIMSbEukqh5WVZdX1aer6jmLvH7Hqjpzev38\nqlq57adkqcxxvn+6qj5aVTdX1SOXY0aWxhzn+llV9bGquriq3lNVByzHnCyNOc73SVV1SVVdVFX/\nWFX3Wo452XKbO9cL1juuqrqqtrtPluN75vjePqGqrp6+ty+qql9bjjnZcvN8b1fVo6Y/uy+rqrds\n6xlvLbdELoGq2jnJJ5P8QpLPJbkgyWO7+2ML1nl6ksO6+6SqekySR3T3o5dlYLbInOd7ZZI9kzw7\nydnd/fZtPylbas5z/bNJzu/ub1bV05Ic6Xt7+zTn+d6zu2+YHh+T5Ond/bDlmJfbbp5zPa23R5J3\nJblDkmd095ptPStbbs7v7ROSrOruZyzLkCyJOc/1QUnemuTnuvvaqvqh7v63ZRl4Tq6wLY2fSvLp\n7v5Md38ryV8nefgG6zw8yRunx29P8vNVVdtwRpbOZs93d1/Z3Rcn+c5yDMiSmedcv6+7vzk9/UiS\nu2/jGVk685zvGxY8vVMSf+u5fZrnz+0keWGSlyT59205HEtu3vPN9m+ec31ikld197VJMnqsJYJt\nqeyX5KoFzz83LVt0ne6+Ocn1Se66TaZjqc1zvrl9uLXn+ilJ/n6rTsTWNNf5rqpfr6p/SfLSJM/c\nRrOxtDZ7rqvqfkn27+53bcvB2Crm/b38uOn29rdX1f7bZjSW2Dzn+p5J7llVH6qqj1TV8HdJCDaA\nJVBVj0+yKsnLlnsWtq7uflV3H5jkd5OcvNzzsPSqaqckL0/yP5d7FraZv02ysrsPS3JuvndXFLc/\nK5IclOTIJI9NcnpV3WVZJ9oMwbY0Pp9k4d/E3H1atug6VbUiyV5Jrtkm07HU5jnf3D7Mda6r6iFJ\nnpvkmO6+aRvNxtK7td/bf53k2K06EVvL5s71HkkOSfL+qroyyQOSnO2DR7Zbm/3e7u5rFvz+/dok\nh2+j2Vha8/w+/rnMPl/g2919RWY/83bQNprvNhFsS+OCJAdV1X+qqjskeUySszdY5+wkT5oePzLJ\ne9snvmyv5jnf3D5s9lxX1ZA+Q+wAAAEsSURBVH2T/EVmsTb8ffBs0jzne+Ef6kcn+dQ2nI+ls8lz\n3d3Xd/fe3b2yu1dm9vOpx/jQke3WPN/b+y54ekySj2/D+Vg68/w32jszu7qWqto7s1skP7Mth7y1\nViz3ALcH3X1zVT0jyTlJdk7y+u6+rKpekGRNd5+d5HVJ3lRVn07y1cz+D8R2aJ7zXVX3T/I3SX4g\nyS9X1andffAyjs1tMOf39suS3DnJ26bPEfrX7j5m2YbmNpvzfD9juqL67STX5nt/Ecd2ZM5zze3E\nnOf7mdMnv96c2X+nnbBsA3ObzXmuz0ny0Kr6WJJbkvx2dw9915uP9QcAABiUWyIBAAAGJdgAAAAG\nJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAGJdgAAAAG9f8BzO7tfUWkEXMAAAAASUVORK5C\nYII=\n",
            "text/plain": [
              "<Figure size 1008x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XWAwVZGZvUNi",
        "colab_type": "text"
      },
      "source": [
        "# Πολύ καλύτερη η ακρίβεια!!! Πως θα βελτιωθεί όμως περισσότερο?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u__n3yiH7q4e",
        "colab_type": "text"
      },
      "source": [
        "(1) Μπορείτε να βρείτε άλλα υλικά που θα σας δώσουν καλύτερη προβλεψη στην ιταλική κουζίνα???"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PCqQOPYU75Iw",
        "colab_type": "text"
      },
      "source": [
        "(2) Μπορείτε να βρείτε 3 υλικά ή παραπάνω που προβλέπουν με σχετικά μεγάλη ακρίβεια την ελληνική κουζίνα?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oRK9f8jPvUO5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}
